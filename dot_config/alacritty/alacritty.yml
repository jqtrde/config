---
# Alacritty config
# https://github.com/alacritty/alacritty/blob/master/alacritty.yml

env:
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8

# Aesthetics
# -----------------------------------------------------------------------------

live_config_reload: true

window:
  decorations: full
  dimensions: {columns: 80, lines: 24}
  dynamic_padding: false
  dynamic_title: true
  padding: {x: 3, y: 3}
  startup_mode: Windowed

font:
  use_thin_strokes: true
  size: 10.0

  normal: {family: PragmataPro Liga, style: Regular}
  bold:   {family: PragmataPro Liga, style: Regular}
  italic: {family: PragmataPro Liga, style: Regular}

cursor:
  style: Beam  # Block, Underline, Beam
  vi_mode_style: Beam
  unfocused_hollow: true


# Input
# -----------------------------------------------------------------------------

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to both the primary and
  # the selection clipboard. Otherwise, it will only be copied to the selection
  # clipboard.
  save_to_clipboard: false

scrolling:
  history: 10000
  multiplier: 3


# Colors
# -----------------------------------------------------------------------------

schemes:

  jqtrde: &jqtrde

    primary:
      background: '#333333'
      foreground: '#d8dee9'
      dim_foreground: '#a5abb6'

    cursor:
      text: '#2e3440'
      cursor: '#d8dee9'

    vi_mode_cursor:
      text: '#2e3440'
      cursor: '#d8dee9'

    selection:
      text: CellForeground
      background: '#4c566a'

    search:
      matches:
        foreground: CellBackground
        background: '#88c0d0'
      bar:
        background: '#434c5e'
        foreground: '#d8dee9'

    normal:
      black:    '#111111'
      red:      '#F24B18'
      green:    '#2ED449'
      yellow:   '#FAE13A'
      blue:     '#2E62D4'
      magenta:  '#C72ED4'
      cyan:     '#88c0d0'
      white:    '#e5e9f0'

    bright:
      black:    '#000000'
      red:      '#DD3B0A'
      green:    '#17AD26'
      yellow:   '#F0D629'
      blue:     '#174FCA'
      magenta:  '#A215C6'
      cyan:     '#8fbcbb'
      white:    '#eceff4'

    dim:
      black:    '#333333'
      red:      '#FF6131'
      green:    '#5BE459'
      yellow:   '#FBE972'
      blue:     '#678DE1'
      magenta:  '#D959E4'
      cyan:     '#6d96a5'
      white:    '#aeb3bb'

  tokyo: &tokyo

    primary:
      background: '0x1a1b26'
      foreground: '0xc0caf5'

    normal:
      black:   '0x15161E'
      red:     '0xf7768e'
      green:   '0x9ece6a'
      yellow:  '0xe0af68'
      blue:    '0x7aa2f7'
      magenta: '0xbb9af7'
      cyan:    '0x7dcfff'
      white:   '0xa9b1d6'

    bright:
      black:   '0x15161E'
      red:     '0xf7768e'
      green:   '0x9ece6a'
      yellow:  '0xe0af68'
      blue:    '0x7aa2f7'
      magenta: '0xbb9af7'
      cyan:    '0x7dcfff'
      white:   '0xc0caf5'

    indexed_colors:
      - { index: 16, color: '0xff9e64' }
      - { index: 17, color: '0xdb4b4b' }


  deus: &deus

    primary:
      background: '#2e3440'
      foreground: '#d8dee9'
      dim_foreground: '#a5abb6'

    cursor:
      text: '#2e3440'
      cursor: '#d8dee9'

    vi_mode_cursor:
      text: '#2e3440'
      cursor: '#d8dee9'

    selection:
      text: CellForeground
      background: '#4c566a'

    search:
      matches:
        foreground: CellBackground
        background: '#88c0d0'
      bar:
        background: '#434c5e'
        foreground: '#d8dee9'

    normal:
      black:    '#3b4252'
      red:      '#bf616a'
      green:    '#a3be8c'
      yellow:   '#ebcb8b'
      blue:     '#81a1c1'
      magenta:  '#b48ead'
      cyan:     '#88c0d0'
      white:    '#e5e9f0'

    bright:
      black:    '#4c566a'
      red:      '#bf616a'
      green:    '#a3be8c'
      yellow:   '#ebcb8b'
      blue:     '#81a1c1'
      magenta:  '#b48ead'
      cyan:     '#8fbcbb'
      white:    '#eceff4'

    dim:
      black:    '#373e4d'
      red:      '#94545d'
      green:    '#809575'
      yellow:   '#b29e75'
      blue:     '#68809a'
      magenta:  '#8c738c'
      cyan:     '#6d96a5'
      white:    '#aeb3bb'

  zenburn: &zenburn

    primary:
      background: '#3d3d3d'
      foreground: '#f8f5ed'

    cursor:
      text: '#000000'
      cursor: '#ffffff'

    normal:
      black:   '#505050'
      red:     '#d7a5a4'
      green:   '#91ad91'
      yellow:  '#e8d7b9'
      blue:    '#c6eaff'
      magenta: '#ba90bd'
      cyan:    '#9ad6d9'
      white:   '#f3f1d9'

    bright:
      black:   '#7f7f7f'
      red:     '#e4b3b2'
      green:   '#d4e894'
      yellow:  '#eff0a5'
      blue:    '#6996bf'
      magenta: '#dcbecd'
      cyan:    '#9ad6d9'
      white:   '#f8f5ed'

    dim:
      black:   '#333333'
      red:     '#f2777a'
      green:   '#99cc99'
      yellow:  '#ffcc66'
      blue:    '#6699cc'
      magenta: '#cc99cc'
      cyan:    '#66cccc'
      white:   '#dddddd'

  gruvbox: &gruvbox

    primary:
      # hard contrast background - '#1d2021'
      background:        &gruvbox_dark_bg '#282828'
      # soft contrast background - '#32302f'
      foreground:        '#fbf1c7'
      bright_foreground: '#f9f5d7'
      dim_foreground:    '#f2e5bc'
    cursor:
      text:   CellBackground
      cursor: CellForeground
    vi_mode_cursor:
      text:   CellBackground
      cursor: CellForeground
    # search:
    #   matches:
    #     foreground: '#000000'
    #     background: '#ffffff'
    #   focused_match:
    #    foreground: CellBackground
    #    background: CellForeground
    #   bar:
    #     background: ''
    #     foreground: ''
    # line_indicator:
    #   foreground: None
    #   background: None     
    selection:
      text:       CellBackground
      background: CellForeground
    bright:
      black:   '#928374'
      red:     '#fb4934'
      green:   '#b8bb26'
      yellow:  '#fabd2f'
      blue:    '#83a598'
      magenta: '#d3869b'
      cyan:    '#8ec07c'
      white:   '#ebdbb2'
    normal:
      black:   *gruvbox_dark_bg
      red:     '#cc241d'
      green:   '#98971a'
      yellow:  '#d79921'
      blue:    '#458588'
      magenta: '#b16286'
      cyan:    '#689d6a'
      white:   '#a89984'
    dim:
      black:   '#32302f'
      red:     '#9d0006'
      green:   '#79740e'
      yellow:  '#b57614'
      blue:    '#076678'
      magenta: '#8f3f71'
      cyan:    '#427b58'
      white:   '#928374'
    # indexed_colors: []


colors: *tokyo

  
bell:
  animation: EaseOutExpo
  duration: 1
  command:
    program: dunstify
    args: ["ping ping"]

background_opacity: 1.0





mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: false

  url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    #
    # When set to `None`, URL launching will be disabled completely.
    #
    # Default:
    #   - (macOS) open
    #   - (Linux/BSD) xdg-open
    #   - (Windows) explorer
    launcher:
      program: xdg-open
    #  args: []

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: None

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
key_bindings:
  - { key: V,        mods: Control|Shift, action: Paste            }
  - { key: C,        mods: Control|Shift, action: Copy             }
  - { key: Insert,   mods: Shift,         action: PasteSelection   }
  - { key: Key0,     mods: Control,       action: ResetFontSize    }
  - { key: Equals,   mods: Control,       action: IncreaseFontSize }
  - { key: Minus,    mods: Control,       action: DecreaseFontSize }
